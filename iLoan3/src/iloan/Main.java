package iloan;

import iloan.customer.FrmAddCustomer;
import iloan.customer.FrmEditCustomer;
import iloan.customer.FrmViewCustomer;
import iloan.kernel.Environment;
import iloan.kernel.StatusHandlers;
import iloan.pawn.FrmNewPawn;
import iloan.utilities.FrmIdTypes;
import iloan.utilities.FrmOccupationList;
import iloan.utilities.FrmSalutationList;
import java.awt.Insets;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.jdesktop.swingx.JXStatusBar;
import org.jdesktop.swingx.plaf.basic.BasicStatusBarUI;

/**
 *
 * @author mrogers
 */
public class Main extends javax.swing.JFrame
{

    private static final Logger logger = Logger.getLogger(Main.class.getName());
    FrmAddCustomer frmAddCustomer = null;
    FrmSalutationList frmSalutationList = null;
    FrmIdTypes frmIdTypes = null;
    FrmOccupationList frmOccupationList = null;
    FrmViewCustomer frmViewCustomer = null;
    FrmEditCustomer frmEditCustomer = null;
    FrmNewPawn frmNewPawn = null;

    /**
     * Creates new form Main
     */
    public Main()
    {
        setupEnvironment();
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("images/ruby.png"));
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        statusBar = new org.jdesktop.swingx.JXStatusBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        customerMenu = new javax.swing.JMenu();
        addCustomer = new javax.swing.JMenuItem();
        editCustomer = new javax.swing.JMenuItem();
        viewCustomer = new javax.swing.JMenuItem();
        pawnMenu = new javax.swing.JMenu();
        newPawn = new javax.swing.JMenuItem();
        manage = new javax.swing.JMenu();
        data = new javax.swing.JMenu();
        idTypeList = new javax.swing.JMenuItem();
        salutationList = new javax.swing.JMenuItem();
        occupationList = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("iLoan - Pawn and Loan management System");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        statusBar.setPreferredSize(new java.awt.Dimension(27, 25));
        //do not add separators automatically
        statusBar.putClientProperty(BasicStatusBarUI.AUTO_ADD_SEPARATOR, Boolean.FALSE);
        statusBar.add(StatusHandlers.taskLabel);
        //use dummy label to fill empty space
        statusBar.add(new JLabel(""), JXStatusBar.Constraint.ResizeBehavior.FILL);
        //create constraint to add space of 5 at components left and right side
        JXStatusBar.Constraint ct = new JXStatusBar.Constraint(new Insets(0, 5, 0, 5));
        //statusBar.add(new JSeparator(JSeparator.VERTICAL), ct);
        //statusBar.add(new JLabel("INS"), ct);
        statusBar.add(new JSeparator(JSeparator.VERTICAL), ct);
        //statusBar.add(new JLabel("Load"), ct);
        JProgressBar progressBar = StatusHandlers.progressBar;
        //use statusbar style if available
        progressBar.setName("StatusProgressBar");
        statusBar.add(progressBar);
        //add the statusbar to the rootPane - some themes require this for proper appearance
        getRootPane().putClientProperty("Synthetica.statusBar", statusBar);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/door_out.png"))); // NOI18N
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        customerMenu.setMnemonic('C');
        customerMenu.setText("Customer");

        addCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/user_add.png"))); // NOI18N
        addCustomer.setMnemonic('A');
        addCustomer.setText("Add Customer");
        addCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerActionPerformed(evt);
            }
        });
        customerMenu.add(addCustomer);

        editCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/user_edit.png"))); // NOI18N
        editCustomer.setText("Edit Customer");
        editCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCustomerActionPerformed(evt);
            }
        });
        customerMenu.add(editCustomer);

        viewCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/user_go.png"))); // NOI18N
        viewCustomer.setText("View Customer");
        viewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCustomerActionPerformed(evt);
            }
        });
        customerMenu.add(viewCustomer);

        menuBar.add(customerMenu);

        pawnMenu.setText("Pawns");

        newPawn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/ruby_add.png"))); // NOI18N
        newPawn.setText("New Pawn");
        newPawn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPawnActionPerformed(evt);
            }
        });
        pawnMenu.add(newPawn);

        menuBar.add(pawnMenu);

        manage.setText("Manage");

        data.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/database_table.png"))); // NOI18N
        data.setText("Data");

        idTypeList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/application_view_list.png"))); // NOI18N
        idTypeList.setText("ID Type List");
        idTypeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTypeListActionPerformed(evt);
            }
        });
        data.add(idTypeList);

        salutationList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/application_view_list.png"))); // NOI18N
        salutationList.setText("Salutation List");
        salutationList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salutationListActionPerformed(evt);
            }
        });
        data.add(salutationList);

        occupationList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/application_view_list.png"))); // NOI18N
        occupationList.setText("Occupation List");
        occupationList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                occupationListActionPerformed(evt);
            }
        });
        data.add(occupationList);

        manage.add(data);

        menuBar.add(manage);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iloan/resources/information.png"))); // NOI18N
        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                    .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
    {
        Environment.closeConnection();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void addCustomerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addCustomerActionPerformed
    {
//GEN-HEADEREND:event_addCustomerActionPerformed
        //Verify if the form is already loaded
        boolean AlreadyLoaded = isLoaded("Add Customer");
        if (AlreadyLoaded == false)
        {
            frmAddCustomer = new FrmAddCustomer();
            desktopPane.add(frmAddCustomer);
            //Load the Form
            frmAddCustomer.setVisible(true);
            frmAddCustomer.show();
            try
            {
                frmAddCustomer.setIcon(false);
                frmAddCustomer.setSelected(true);
            }
            catch (Exception e)
            {
                logger.log(Level.SEVERE, "Error displaying the form.", e);
            }
        }
    }//GEN-LAST:event_addCustomerActionPerformed

    private void salutationListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_salutationListActionPerformed
    {
//GEN-HEADEREND:event_salutationListActionPerformed
        //Verify if the form is already loaded
        boolean AlreadyLoaded = isLoaded("Manage Salutation List");
        if (AlreadyLoaded == false)
        {
            frmSalutationList = new FrmSalutationList();
            desktopPane.add(frmSalutationList);
            //Load the Form
            frmSalutationList.setVisible(true);
            frmSalutationList.show();
            try
            {
                frmSalutationList.setIcon(false);
                frmSalutationList.setSelected(true);
            }
            catch (Exception e)
            {
                logger.log(Level.SEVERE, "Error displaying the form.", e);
            }
        }
    }//GEN-LAST:event_salutationListActionPerformed

    private void idTypeListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_idTypeListActionPerformed
    {
//GEN-HEADEREND:event_idTypeListActionPerformed
        //Verify if the form is already loaded
        boolean AlreadyLoaded = isLoaded("Manage ID Type List");
        if (AlreadyLoaded == false)
        {
            frmIdTypes = new FrmIdTypes();
            desktopPane.add(frmIdTypes);
            //Load the Form
            frmIdTypes.setVisible(true);
            frmIdTypes.show();
            try
            {
                frmIdTypes.setIcon(false);
                frmIdTypes.setSelected(true);
            }
            catch (Exception e)
            {
                logger.log(Level.SEVERE, "Error displaying the form.", e);
            }
        }
    }//GEN-LAST:event_idTypeListActionPerformed

    private void occupationListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_occupationListActionPerformed
    {
//GEN-HEADEREND:event_occupationListActionPerformed
        //Verify if the form is already loaded
        boolean AlreadyLoaded = isLoaded("Manage Occupation List");
        if (AlreadyLoaded == false)
        {
            frmOccupationList = new FrmOccupationList();
            desktopPane.add(frmOccupationList);
            //Load the Form
            frmOccupationList.setVisible(true);
            frmOccupationList.show();
            try
            {
                frmOccupationList.setIcon(false);
                frmOccupationList.setSelected(true);
            }
            catch (Exception e)
            {
                logger.log(Level.SEVERE, "Error displaying the form.", e);
            }
        }
    }//GEN-LAST:event_occupationListActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {
//GEN-HEADEREND:event_formWindowClosing
        exitMenuItemActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void viewCustomerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_viewCustomerActionPerformed
    {
//GEN-HEADEREND:event_viewCustomerActionPerformed
        //Verify if the form is already loaded
        boolean AlreadyLoaded = isLoaded("View Customer");
        if (AlreadyLoaded == false)
        {
            frmViewCustomer = new FrmViewCustomer();
            desktopPane.add(frmViewCustomer);
            //Load the Form
            frmViewCustomer.setVisible(true);
            frmViewCustomer.show();
            try
            {
                frmViewCustomer.setIcon(false);
                frmViewCustomer.setSelected(true);
            }
            catch (Exception e)
            {
                logger.log(Level.SEVERE, "Error displaying the form.", e);
            }
        }
    }//GEN-LAST:event_viewCustomerActionPerformed

    private void editCustomerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editCustomerActionPerformed
    {//GEN-HEADEREND:event_editCustomerActionPerformed
        //Verify if the form is already loaded
        boolean AlreadyLoaded = isLoaded("Edit Customer");
        if (AlreadyLoaded == false)
        {
            frmEditCustomer = new FrmEditCustomer();
            desktopPane.add(frmEditCustomer);
            //Load the Form
            frmEditCustomer.setVisible(true);
            frmEditCustomer.show();
            try
            {
                frmEditCustomer.setIcon(false);
                frmEditCustomer.setSelected(true);
            }
            catch (Exception e)
            {
                logger.log(Level.SEVERE, "Error displaying the form.", e);
            }
        }
    }//GEN-LAST:event_editCustomerActionPerformed

    private void newPawnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newPawnActionPerformed
    {//GEN-HEADEREND:event_newPawnActionPerformed
       //Verify if the form is already loaded
        boolean AlreadyLoaded = isLoaded("New Pawn");
        if (AlreadyLoaded == false)
        {
            frmNewPawn = new FrmNewPawn();
            desktopPane.add(frmNewPawn);
            //Load the Form
            frmNewPawn.setVisible(true);
            frmNewPawn.show();
            try
            {
                frmNewPawn.setIcon(false);
                frmNewPawn.setSelected(true);
            }
            catch (Exception e)
            {
                logger.log(Level.SEVERE, "Error displaying the form.", e);
            }
        }
    }//GEN-LAST:event_newPawnActionPerformed

    /**
     * This function checks if a specified form is already displayed. It accepts
     * the window title in the form of a string and checks if it is already
     * loaded onto the desktop pane. It then returns a boolean depending on the
     * result of the test.
     *
     * @param FormTitle
     * @return True if a loaded frame contains the specified string in title.
     * False if no frames contains the specified string.
     */
    protected boolean isLoaded(String FormTitle)
    {
        JInternalFrame Form[] = desktopPane.getAllFrames();
        for (int i = 0; i < Form.length; i++)
        {
            if (Form[i].getTitle().equalsIgnoreCase(FormTitle))
            {
                Form[i].show();
                try
                {
                    Form[i].setIcon(false);
                    Form[i].setSelected(true);
                }
                catch (Exception e)
                {
                    logger.log(Level.SEVERE, "Error displaying form.", e);
                }
                return true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code ">
        try
        {
            String[] li =
            {
                "Licensee=Maurice Rogers", "LicenseRegistrationNumber=------", "Product=Synthetica", "LicenseType=Non Commercial", "ExpireDate=--.--.----", "MaxVersion=2.999.999"
            };
            UIManager.put("Synthetica.license.info", li);
            UIManager.put("Synthetica.license.key", "2BCF99E0-3738913D-F30B5EC9-622511CC-4F19572A");
            String[] li2 =
            {
                "Licensee=JYLOO Software", "LicenseRegistrationNumber=------", "Product=SyntheticaAddons", "LicenseType=For internal tests only", "ExpireDate=--.--.----", "MaxVersion=1.999.999"
            };
            UIManager.put("SyntheticaAddons.license.info", li2);
            UIManager.put("SyntheticaAddons.license.key", "CC98A980-13381C7D-30604C91-F5BC5376-776C6006");
            javax.swing.UIManager.setLookAndFeel("de.javasoft.plaf.synthetica.SyntheticaSimple2DLookAndFeel");
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            @Override
            public void run()
            {
                new Main().setVisible(true);
            }
        });
    }

    /**
     * This method will create the environment necessary for the program to
     * execute.
     */
    private void setupEnvironment()
    {
        Environment.createConnection();
        Environment.setMainFrame(this);
        Environment.setDesktopPane(desktopPane);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem addCustomer;
    private javax.swing.JMenu customerMenu;
    private javax.swing.JMenu data;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem editCustomer;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem idTypeList;
    private javax.swing.JMenu manage;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newPawn;
    private javax.swing.JMenuItem occupationList;
    private javax.swing.JMenu pawnMenu;
    private javax.swing.JMenuItem salutationList;
    private org.jdesktop.swingx.JXStatusBar statusBar;
    private javax.swing.JMenuItem viewCustomer;
    // End of variables declaration//GEN-END:variables
}
